###select single column
#select the title column from the films table
SELECT name 
FROM people;

#Select the name of each person in the people table.
SELECT name
FROM people;



###select multiple columns
#Get the title and release year for every film.
SELECT title, release_year
FROM films;

#SELECT title, release_year, and country for every film.
SELECT title, release_year, country
FROM films;

#Get all columns from the films table
SELECT *
FROM films;


###select distinct
#Get all the unique countries represented in the films table.
SELECT DISTINCT country
FROM films;

#Get all the different film certifications from the films table.
SELECT DISTINCT certifications
FROM films;


###count (all & unique)
#Count the number of rows in the people table.
SELECT COUNT(*)
FROM people;

#Count the number of unique birth dates in the people table.
SELECT COUNT(distinct birthdate)
FROM people;




###filtering results
#Get all details for all French language films.
SELECT * 
FROM films
WHERE language = 'French';

#Get the name and birth date of the person born on November 11th, 1974. 
#Remember to use ISO date format ('1974-11-11')!
SELECT name, birthdate
FROM people
WHERE birthdate = '1974-11-11';

#Get the number of Hindi language films.
SELECT COUNT(language)
FROM films
WHERE language = 'Hindi';

#Get all details for all films with an R certification.
SELECT *
FROM films
WHERE certification = 'R';





###where and 
#Get the title and release year for all Spanish language films released before 2000.
SELECT title, release_year
FROM films
WHERE language = 'Spanish' AND release_year <2000;

#Get all details for Spanish language films released after 2000, but before 2010.
SELECT *
FROM films
WHERE language = 'Spanish' AND release_year >2000 and release_year<2010;




###where and or
#Get the title and release year for films released in the 90s that only are French or Spanish language films
SELECT title, release_year
FROM films
WHERE (release_year <2000 AND release_year >= 1990) AND (language = 'French'or language = 'Spanish');





###between
#Get the title and release year of all films released between 1990 and 2000 (inclusive).
SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000;



###where in
#Get the title and release year of all films released in 1990 or 2000 that were longer than two hours.
SELECT title, release_year
FROM films
WHERE year IN (1990,2000)
AND duration > 120;

#Get the title and language of all films which were in English, Spanish, or French.
SELECT title, lanugage
FROM films
WHERE language IN('English','French','Spanish');





###introduction to NULL and IS NULL
#Get the names of people who are still alive, i.e. whose death date is missing.
SELECT name
FROM people
WHERE death IS NULL;

#Get the title of every film which doesn't have a budget associated with it.
SELECT title
FROM films
WHERE budget IS NULL;

#Get the number of films which don't have a language associated with them.
SELECT COUNT(*)
FROM films
WHERE language IS NULL;




###like and not like
#Get the names of all people whose names begin with 'B'. The pattern you need is 'B%'.
SELECT name
FROM people
WHERE name LIKE 'B%';

#Get the names of people whose names have 'r' as the second letter. The pattern you need is '_r%'
SELECT name
FROM people
WHERE name LIKE '_r%';

#Get the names of people whose names don't start with A. The pattern you need is 'A%'.
SELECT name
FROM people
WHERE name NOT LIKE 'A%';




###aggregate function
#Use the SUM() function to get the total duration of all films.
SELECT SUM(duration)
FROM films;

#Get the average duration of all films.
SELECT AVG(duration)
FROM films;

#Get the duration of the shortest film.
SELECT MIN(duration)
FROM films;




###Combining aggregate functions with WHERE
#Use the SUM() function to get the total amount grossed by all films made in the year 2000 or later.
SELECT SUM(gross)
FROM films
WHERE release_year >= 2000;

#Get the average amount grossed by all films whose titles start with the letter 'A'.
SELECT AVG(gross)
FROM films
WHERE title LIKE 'A%';

#Get the amount grossed by the best performing film between 2000 and 2012, inclusive.
SELECT MAX(gross)
FROM films
WHERE release_year BETWEEN 2000 AND 2012;




### its as simple as aliasing
#Get the title and net profit (the amount a film grossed, minus its budget) for all films. Alias the net profit as net_profit.
SELECT title, (gross-budget) AS net_profit
FROM films;

#Get the title and duration in hours for all films. The duration is in minutes, so you'll need to divide by 60.0 to get the duration in hours. Alias the duration in hours as duration_hours.
SELECT title, (duration/60) AS duration_hours
FROM films;

#Get the average duration in hours for all films, aliased as avg_duration_hours.
SELECT AVG(duration)/60 as avg_duration_hours
FROM films;


###Even more aliasing
#Get the percentage of people who are no longer alive. Alias the result as percentage_dead. Remember to use 100.0 and not 100!
SELECT COUNT(deathdate)*100/COUNT(*) 
AS percentage_dead
FROM people;

#Get the number of years between the newest film and oldest film. Alias the result as difference.
SELECT MAX(release_year)-MIN(release_year)
AS difference
FROM films;

#Get the number of decades the films table covers. Alias the result as number_of_decades. The top half of your fraction should be enclosed in parentheses.
SELECT (MAX(release_year) - MIN(release_year))/10 
AS number_of_decades
FROM films;




###order by
#Get the names of people from the people table, sorted alphabetically.
SELECT name
FROM people
ORDER BY name;

#Get the birth date and name for every person, in order of when they were born.
SELECT birthdate, name
FROM people
ORDER BY birthdate;


###sort single columns
#Get the title of films released in 2000 or 2012, in the order they were released.
SELECT title
FROM films
WHERE release_year in (2000,2012)
ORDER BY release_year;

#Get all details for all films except those released in 2015 and order them by duration.
SELECT *
FROM films
****(<>:not equal) WHERE release_year <> 2015
ORDER BY duration;

#Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.
SELECT title, gross
FROM films
WHERE title LIKE 'M%'
ORDER BY title;




###sort single columns(desc)
#Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.
SELECT imdb_score, film_id
FROM reviews
ORDER BY imdb_score desc;

#Get the title for every film, in reverse order.
SELECT title
FROM films
ORDER BY title desc;

#Get the title and duration for every film, in order of longest duration to shortest.
SELECT title, duration
FROM films
ORDER BY duration desc;




###sort multiple columns
#Get the birth date and name of people in the people table, in order of when they were born and alphabetically by name.
SELECT birthdate, name
FROM people
ORDER BY birthdate, name;

#Get the release year, duration, and title of films ordered by their release year and duration.
SELECT release_year, duration, title
FROM films
ORDER BY release_year, duration;

#Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.
SELECT certifications, release_year, title
FROM films
ORDER BY certification, release_year;




###group by
#Get the release year and count of films released in each year.
SELECT release_year, COUNT(*)
FROM films
GROUP BY release_year;

#Get the release year and average duration of all films, grouped by release year.
SELECT release_year, AVG(duration)
FROM films
GROUP BY release_year;

#Get the release year and largest budget for all films, grouped by release year.
SELECT release_year, MAX(budget)
FROM films
GROUP BY release_year;

#Get the IMDB score and count of film reviews grouped by IMDB score in the reviews table.
SELECT imdb_score, COUNT(num_votes)
FROM films
GROUP BY imdb_score;

#Get the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.
SELECT country, release_year, MIN(gross)
FROM films
GROUP BY release_year, country
ORDER BY country, release_year;
